// 若需除錯時，請移除不帶引號的 "// SNlog " 以便 Serial.print 可輸出

// for ESP8266 WIFI
#include <ESP8266WiFi.h>

// for OTA add this 3 lib
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>                  // for NTP function also need <WiFiUdp.h> too
#include <ArduinoOTA.h>

// for NTP
#include <NTPClient.h>

#ifndef STASSID
#define STASSID "your-ssid"           // WIFI SSID
#define STAPSK  "your-password"       // WIFI 密碼
#endif

WiFiServer server(800);               // 自定義 HTTP port = 800

// 定義接腳與變數
String header;                        // HTML 內容字串
const char* ssid     = STASSID;       // 定義SSID字串
const char* password = STAPSK;        // 定義密碼字串

const int led_pin = 2;                // 定義 LED的接腳 GPIO2 = pin D9　= built-in LED
const int button1_pin = 14;           // 定義 按鍵1的接腳 GPIO14 = pin D5&D13
const int relay1 = 5;                 // 定義 Relay1的接腳 GPIO5 = pin D3&D15
int buttonState1 = 0;                 // 定義 紀錄按鈕1的狀態值

String r41State = "off";              // 設定字串變數 r41State
String r42State = "off";              // 設定字串變數 r42State
String r43State = "off";              // 設定字串變數 r43State

unsigned long currentTime = millis(); // Current time
unsigned long previousTime = 0;       // Previous time
unsigned long currentMillis = 0;      // relay1 runtime
unsigned long r41onTime = 0;          // relay1 on time
unsigned long r41offTime = 0;         // relay1 off time
int r41onCount = 0;                   // relay1 on counts
int r41offCount = 0;                  // relay1 off counts
int r4TotalCount = 0;                 // 設定的時間內 開與關的次數
int r1state = 0;                      // relay1 狀態值
int everyMinute = 6;                  // 每幾分鐘
int turnOnSec = 15;                   // 開啟噴霧幾秒
int t4 = 0;                           // t4 = 1 = 噴霧時間1小時

String formattedTime;                 // 儲存時間的變數
WiFiUDP ntpUDP;                       // NTP 初始化
NTPClient timeClient(ntpUDP);

const long timeoutTime = 3000;        // Define timeout time, example: 3000ms = 3s

void setup()                          // 系統初始化 階段
{
  currentTime = millis();
  Serial.begin(115200);               // 定義COM序列埠速度

  pinMode(led_pin, OUTPUT);           // 設定LED的PIN腳為輸出
  pinMode(relay1, OUTPUT);            // 設定relay1 pin腳為輸出
  pinMode(button1_pin, INPUT_PULLUP); // 設定按鈕1的接腳為輸入 上拉

  digitalWrite(led_pin, HIGH);        // LED off
  digitalWrite(relay1, HIGH);         // relay1 off

  WiFi.mode(WIFI_STA);                // start to connect WIFI
  WiFi.begin(ssid, password);
  while (WiFi.waitForConnectResult() != WL_CONNECTED)
  {
    // SNlog Serial.println("Connection Failed! Rebooting...");
    delay(5000);
    ESP.restart();
  }
  // SNlog Serial.println(".....");
  // Print local IP address and start web server
  // SNlog Serial.print("WiFi connected, IP is: ");
  // SNlog Serial.println(WiFi.localIP());

  // start the OTA process
  // Port defaults to 8266
  ArduinoOTA.setPort(48266);                                        // set OTA port
  // Hostname defaults to esp8266-[ChipID]
  ArduinoOTA.setHostname("esp8266");                                // set OTA hostname
  // No authentication by default
  // ArduinoOTA.setPassword("admin");
  // Password can be set with it's md5 value as well
  // MD5(admin) = 21232f297a57a5a743894a0e4a801fc3
  ArduinoOTA.setPasswordHash("21232f297a57a5a743894a0e4a801fc3");   // MD5(admin)

  ArduinoOTA.onStart([]()
  {
    String type;
    if (ArduinoOTA.getCommand() == U_FLASH)
    {
      type = "sketch";
    }
    else
    { // U_FS
      type = "filesystem";
    }

    // NOTE: if updating FS this would be the place to unmount FS using FS.end()
    // SNlog Serial.println("Start updating " + type);
  });
  ArduinoOTA.onEnd([]()
  {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total)
  {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error)
  {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR)
    {
      Serial.println("Auth Failed");
    }
    else if (error == OTA_BEGIN_ERROR)
    {
      Serial.println("Begin Failed");
    }
    else if (error == OTA_CONNECT_ERROR)
    {
      Serial.println("Connect Failed");
    }
    else if (error == OTA_RECEIVE_ERROR)
    {
      Serial.println("Receive Failed");
    }
    else if (error == OTA_END_ERROR)
    {
      Serial.println("End Failed");
    }
  });
  ArduinoOTA.begin();   // start OTA function

  server.begin();       // start WEB server

  timeClient.begin();               // 設定時區 *60分 *60秒，例如: GMT +1 = 3600 , GMT 0 = 0
  timeClient.setTimeOffset(28800);  // GMT +8 = 28800 = 台灣時區

  Serial.print("setup start at ms: "); Serial.print(currentTime); currentTime = millis();
  Serial.print(" done at ms: "); Serial.println(currentTime);
  Serial.println("SYSTEM READY!");  // 系統初始化 完成
}

void loop() {                       // 程式循環 開始
  ArduinoOTA.handle();
  WiFiClient client = server.available();     // check client is connected or not

  timeClient.update();                        // 使用NTP更新 日期、時間
  formattedTime = timeClient.getFormattedTime();

  buttonState1 = digitalRead(button1_pin);    // 讀取按鍵1的狀態
  if (buttonState1 == LOW) {                  // 如果按鍵1按了
    digitalWrite(led_pin, LOW);               // 亮LED
    delay(1000);                              // 延時1秒 (持續按住按鍵1秒)

    buttonState1 = digitalRead(button1_pin);  // 再次讀取按鍵1的狀態
    if (buttonState1 == LOW) {                // 確認按鍵1仍是按著的
      digitalWrite(led_pin, HIGH);            // 關閉LED
      delay(1000);
      t4 = t4 + 1;                            // t4 加 1小時
      Serial.print("button1 is press, t4= "); // serial 印出 t4 值
      Serial.println(t4);
    }
  }

  // 以下為定時的動作                         everyMinute = 每幾分鐘
  //                                          turnOnSec = 開啟噴霧幾秒
  if (t4 > 0)
  {
    r4TotalCount = ((t4 * 60) / everyMinute); //計算出噴霧時間內 開與關的次數 t4小時*60分/每幾分鐘)

    if (r41onTime == 0)  // 第一次執行時，預先噴 NN 秒 + 將開啟時間設為 目前時間-(everyMinute分鐘*60秒*1000ms) 再減100ms
    {
      currentMillis = millis();               // 目前時間
      // SNlog Serial.println("r41onTime == 0");
      digitalWrite(relay1, LOW);              // 開啟 R1
      digitalWrite(led_pin, LOW);             // 開啟 LED
      r41onTime = currentMillis;
      while ((long)(currentMillis - r41onTime) < 30000) //  預先噴30秒             ============
      {
        currentMillis = millis();
        delay(100);                           // !!! 不加delay的話 跑約三~四秒就會造成重開機 !!! (delay至少要1以上)
        // SNlog Serial.print("r41onTime == 0++ to 30000 : ");Serial.println(currentMillis- r41onTime);
      }
      digitalWrite(led_pin, HIGH);            // 關閉 LED
      digitalWrite(relay1, HIGH);             // 關閉 R1
      r41onTime = currentMillis - ((long)everyMinute * 60 * 1000) - 100;
    }
    currentMillis = millis();                 // 目前時間
    if (((int)(r41onCount < r4TotalCount)) && (r1state == 0) && ((unsigned long)(currentMillis - r41onTime) > (everyMinute * 60 * 1000)))
      //       R1開啟的次數 小於 全部應開的次數   +   R1為 關閉狀態   +                   　　　　  距離上次開啟時間大於或超過 everyMinute分鐘
    {
      digitalWrite(relay1, LOW);      // 開啟 R1
      r41onTime = currentMillis;      // 紀錄 R1 開啟時間
      r41onCount = r41onCount + 1;    // R1開啟的次數 +1
      r1state = 1;                    // R1為開啟狀態
      r41offTime = currentMillis;     // 變更關閉時間
      // SNlog Serial.println("R1 on");        // serial 印出t4 time count等各值
      // SNlog Serial.print("t4="); Serial.print(t4);
      // SNlog Serial.print(", current="); Serial.print(currentMillis);
      // SNlog Serial.print(", state="); Serial.print(r1state);
      // SNlog Serial.print(", on="); Serial.print(r41onCount);
      // SNlog Serial.print(", onTime="); Serial.print(r41onTime);
      // SNlog Serial.print(", off="); Serial.print(r41offCount);
      // SNlog Serial.print(", offTime="); Serial.print(r41offTime);
      // SNlog Serial.print(", total=");
      // SNlog Serial.println(r4TotalCount);
    }

    if (((int)(r41offCount < r4TotalCount)) && (r1state == 1) && ((unsigned long)(currentMillis - r41offTime) > (turnOnSec * 1000)))
      //       R1關閉的次數 小於 全部應開的次數    +   R1為 開啟狀態   +             　　　  距離上次開啟時間(第145行)大於或超過 turnOnSec秒
    {
      digitalWrite(relay1, HIGH);     // 關閉 R1
      r41offTime = currentMillis;     // 紀錄 R1 關閉時間
      r41offCount = r41offCount + 1;  // R1關閉的次數 +1
      r1state = 0;                    // R1為關閉狀態
      // SNlog Serial.println("R1 off");       // serial 印出t4 time count等各值
      // SNlog Serial.print("t4="); Serial.print(t4);
      // SNlog Serial.print(", current="); Serial.print(currentMillis);
      // SNlog Serial.print(", state="); Serial.print(r1state);
      // SNlog Serial.print(", on="); Serial.print(r41onCount);
      // SNlog Serial.print(", onTime="); Serial.print(r41onTime);
      // SNlog Serial.print(", off="); Serial.print(r41offCount);
      // SNlog Serial.print(", offTime="); Serial.print(r41offTime);
      // SNlog Serial.print(", total=");
      // SNlog Serial.println(r4TotalCount);
    }

    if ((int)(r41offCount == r4TotalCount))
      // R1關閉的次數 = 全部應開的次數  則 各數值歸零
    {
      delay(3000);
      digitalWrite(relay1, HIGH);     // 關閉 R1
      t4 = 0;
      r41onCount = 0;
      r41offCount = 0;
      r4TotalCount = 0;
      r41offTime = 0;
      r41State = "off";
      r42State = "off";
      r43State = "off";
      // SNlog Serial.println("ALL off : ");   // serial 印出t4 time count等各值
      // SNlog Serial.print("t4="); Serial.print(t4);
      // SNlog Serial.print(", current="); Serial.print(currentMillis);
      // SNlog Serial.print(", state="); Serial.print(r1state);
      // SNlog Serial.print(", on="); Serial.print(r41onCount);
      // SNlog Serial.print(", onTime="); Serial.print(r41onTime);
      // SNlog Serial.print(", off="); Serial.print(r41offCount);
      // SNlog Serial.print(", offTime="); Serial.print(r41offTime);
      // SNlog Serial.print(", total=");
      // SNlog Serial.println(r4TotalCount);
    }
  }

  // 以下為網頁HTML產生碼
  if (client) {                             // If a new client connects,
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    currentTime = millis();
    previousTime = currentTime;
    while (client.connected() && currentTime - previousTime <= timeoutTime) {   // loop while the client's connected
      currentTime = millis();
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        //Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();

            // 接收 client  的指令 (URLs requests)

            if (header.indexOf("GET /41/on") >= 0)
            {
              // SNlog Serial.println("state 41 on");
              // start the 4F 1H step
              r41State = "on";
              t4 = 1;                           // t4 = 1小時
              // SNlog Serial.print("r41on t4= ");
              // SNlog Serial.println(t4);
              goto endhtml;
            }
            else if (header.indexOf("GET /41/off") >= 0)
            {
              // SNlog Serial.println("state 41 off");
              t4 = 0;
              r41onCount = 0;
              r41offCount = 0;
              r4TotalCount = 0;
              r41offTime = 0;
              r41State = "off";
              r42State = "off";
              r43State = "off";
              // relay1 turn off = HIGH
              digitalWrite(relay1, HIGH);
              goto endhtml;
            }
            else if (header.indexOf("GET /42/on") >= 0)
            {
              // SNlog Serial.println("state 42 on");
              // start the 4F 2H step
              r42State = "on";
              t4 = 2;                           // t4 = 2小時
              // SNlog Serial.print("r42on t4= ");
              // SNlog Serial.println(t4);
              goto endhtml;
            }
            else if (header.indexOf("GET /42/off") >= 0)
            {
              // SNlog Serial.println("state 42 off");
              t4 = 0;
              r41onCount = 0;
              r41offCount = 0;
              r4TotalCount = 0;
              r41offTime = 0;
              r41State = "off";
              r42State = "off";
              r43State = "off";
              // relay1 turn off = HIGH
              digitalWrite(relay1, HIGH);
              goto endhtml;
            }
            else if (header.indexOf("GET /43/on") >= 0)
            {
              // SNlog Serial.println("state 43 on");
              // start the 4F 3H step
              r43State = "on";
              t4 = 3;                           // t4 = 3小時
              // SNlog Serial.print("r43on t4= ");
              // SNlog Serial.println(t4);
              goto endhtml;
            }
            else if (header.indexOf("GET /43/off") >= 0)
            {
              // SNlog Serial.println("state 43 off");
              t4 = 0;
              r41onCount = 0;
              r41offCount = 0;
              r4TotalCount = 0;
              r41offTime = 0;
              r41State = "off";
              r42State = "off";
              r43State = "off";
              // relay1 turn off = HIGH
              digitalWrite(relay1, HIGH);
              goto endhtml;
            }
            else if (header.indexOf("GET /minute03") >= 0)
            {
              // SNlog Serial.println("everyMinute = 3");
              everyMinute = 3;
              goto endhtml;
            }
            else if (header.indexOf("GET /minute05") >= 0)
            {
              // SNlog Serial.println("everyMinute = 5");
              everyMinute = 5;
              goto endhtml;
            }
            else if (header.indexOf("GET /minute08") >= 0)
            {
              // SNlog Serial.println("everyMinute = 8");
              everyMinute = 8;
              goto endhtml;
            }
            else if (header.indexOf("GET /minute15") >= 0)
            {
              // SNlog Serial.println("everyMinute = 15");
              everyMinute = 15;
              goto endhtml;

            }
            else if (header.indexOf("GET /minute30") >= 0)
            {
              // SNlog Serial.println("everyMinute = 30");
              everyMinute = 30;
              goto endhtml;

            }
            else if (header.indexOf("GET /minute60") >= 0)
            {
              // SNlog Serial.println("everyMinute = 60");
              everyMinute = 60;
              goto endhtml;

            }
            else if (header.indexOf("GET /sec05") >= 0)
            {
              // SNlog Serial.println("turnOnSec = 5");
              turnOnSec = 5;
              goto endhtml;

            }
            else if (header.indexOf("GET /sec10") >= 0)
            {
              // SNlog Serial.println("turnOnSec = 10");
              turnOnSec = 10;
              goto endhtml;

            }
            else if (header.indexOf("GET /sec15") >= 0)
            {
              // SNlog Serial.println("turnOnSec = 15");
              turnOnSec = 15;
              goto endhtml;

            }
            else if (header.indexOf("GET /sec20") >= 0)
            {
              // SNlog Serial.println("turnOnSec = 20");
              turnOnSec = 20;
              goto endhtml;

            }
            else if (header.indexOf("GET /sec30") >= 0)
            {
              // SNlog Serial.println("turnOnSec = 30");
              turnOnSec = 30;
              goto endhtml;

            }
            else if (header.indexOf("GET /sec50") >= 0)
            {
              // SNlog Serial.println("turnOnSec = 50");
              turnOnSec = 50;
              goto endhtml;

            }
            else if (header.indexOf("GET /reset8266") >= 0)
            {
              client.println("<meta content='text/html; charset=UTF-8' http-equiv='Content-Type'/>");
              client.println("<style>.button {background-color: #4CAF50; border: none; color: white; padding: 16px 40px;}");
              client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}</style>");
              client.println("<center><a href=\"/\"><button class=\"button\">三秒後 點此回首頁</button></a>");
              client.println("</body></html>");
              delay(100);
              ESP.restart();
            }

            // HTML start , details
            client.println("<html>");
            client.println("<head>");
            client.println("<link rel = \"icon\" href=\"data:,\">");
            client.println("<meta content='text/html; charset=UTF-8' http-equiv='Content-Type'/>");
            // CSS to style the on/off buttons
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button2 {background-color: #555555;}</style></head>");

            // Web Page Heading
            client.print("<body><h1>灑水噴霧系統 目前時間: ");
            client.println(formattedTime);
            client.println("<p> </p></h1>");

            client.print("<h2>四樓陽台噴霧，每 "); client.print(everyMinute);
            client.print(" 分鐘 噴 "); client.print(turnOnSec); client.println(" 秒</h2>");

            client.print("<h2>設定噴霧時間 :</h2>");

            // If the r41State is off, it displays the ON button
            if (r41State == "off") {
              client.println("<a href=\"/41/on\"><button class=\"button\">1小時</button></a>");
            } else {
              client.println("<a href=\"/41/off\"><button class=\"button button2\">停止</button></a>");
            }

            // If the r42State is off, it displays the ON button
            if (r42State == "off") {
              client.println("<a href=\"/42/on\"><button class=\"button\">2小時</button></a>");
            } else {
              client.println("<a href=\"/42/off\"><button class=\"button button2\">停止</button></a>");
            }

            // If the r43State is off, it displays the ON button
            if (r43State == "off") {
              client.println("<a href=\"/43/on\"><button class=\"button\">3小時</button></a>");
            } else {
              client.println("<a href=\"/43/off\"><button class=\"button button2\">停止</button></a>");
            }

            client.print("<h2>設定 每 X 分鐘 噴 "); client.print(turnOnSec); client.println(" 秒</h2>");

            client.print("<a href=\"/minute03\"><button class=\"button\">3分</button></a>");
            client.print("<a href=\"/minute05\"><button class=\"button\">5分</button></a>");
            client.print("<a href=\"/minute08\"><button class=\"button\">8分</button></a>");
            client.print("<p></p>");
            client.print("<a href=\"/minute15\"><button class=\"button\">15分</button></a>");
            client.print("<a href=\"/minute30\"><button class=\"button\">30分</button></a>");
            client.print("<a href=\"/minute60\"><button class=\"button\">60分</button></a>");

            client.print("<h2>設定每 "); client.print(everyMinute); client.println(" 分鐘 噴 Y 秒</h2>");
            client.print("<a href=\"/sec05\"><button class=\"button\">5秒</button></a>");
            client.print("<a href=\"/sec10\"><button class=\"button\">10秒</button></a>");
            client.print("<a href=\"/sec15\"><button class=\"button\">15秒</button></a>");
            client.print("<p></p>");
            client.print("<a href=\"/sec20\"><button class=\"button\">20秒</button></a>");
            client.print("<a href=\"/sec30\"><button class=\"button\">30秒</button></a>");
            client.print("<a href=\"/sec50\"><button class=\"button\">50秒</button></a>");

            client.print("<p> </p>");
            client.println("<body><h2>重啟設備</h2>");
            client.print("<a href=\"/reset8266\"><button class=\"button\">RESET</button></a>");
            goto bottomhtml;

endhtml:
            client.println("<meta content='text/html; charset=UTF-8' http-equiv='Content-Type'/>");
            client.println("<style>.button {background-color: #4CAF50; border: none; color: white; padding: 16px 40px;}");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}</style>");
            client.println("<meta http-equiv=\"refresh\" content=\"2;url=http://192.168.0.222:800/\"/></head>");
            client.println("<center><a href=\"/\"><button class=\"button\">回首頁</button></a>");

bottomhtml:
            client.println("</body></html>");
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          }  else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}
